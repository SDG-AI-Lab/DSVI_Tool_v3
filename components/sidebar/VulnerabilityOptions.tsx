import React, { useContext, useEffect } from 'react'
import { FilterContext } from '../../context/FilterContext'
import SidebarToggle from './SidebarToggle'
import { GrVulnerability } from 'react-icons/gr'
import {
  DragDropContext,
  Droppable,
  Draggable,
  DropResult,
} from 'react-beautiful-dnd'
import { CategoriesCollectionType } from '../../reducer/reducerInitialState'

function VulnerabilityOptions() {
  const { state, dispatch } = useContext(FilterContext)
  const { vulnerability, categories, activeLegends } = state

  // PUSHING categories into activeLegends on initial render
  // And removing them if vulnerabity === false
  useEffect(() => {
    let catLegends = []
    if (!activeLegends.length && vulnerability) {
      catLegends = categories
    } else if (!vulnerability) {
      let negativeCatLegends = activeLegends
        .filter((x) => x.slug.startsWith('cats_'))
        .map((x) => {
          return { ...x, status: false }
        })
      catLegends = negativeCatLegends
    }

    catLegends.forEach((category) => {
      dispatch({
        type: 'CHANGE_ACTIVE_LEGENDS',
        payload: category,
      })
    })
  }, [vulnerability])

  const onDragEnd = (result: DropResult) => {
    dispatch({ type: 'DRAG_DROP_CATEGORIES', payload: result, categories })
  }

  const onChange = (category: CategoriesCollectionType, index: number) => {
    const newItem = { ...category, status: !category.status }

    dispatch({
      type: 'CHANGE_CATEGORIES',
      payload: newItem,
      index_1: index,
    })
    dispatch({
      type: 'CHANGE_ACTIVE_LEGENDS',
      payload: newItem,
    })
  }

  return (
    <ul>
      <li className="relative">
        <SidebarToggle
          onClick={() => dispatch({ type: 'TOGGLE_VULNERABILITY' })}
        >
          <>
            <GrVulnerability className="mr-2 h-4 w-4" />
            <span>{vulnerability ? 'Hide' : 'Show'} Vulnerability</span>
          </>
        </SidebarToggle>
        {vulnerability && (
          <ul className="accordion-collapse collapse relative">
            <li className="relative">
              <div className="i flex items-center">
                <span className="ml-1 px-5 text-sm text-gray-700">
                  Categories
                </span>
              </div>
              <div className="px-6">
                {/* SHOW HIDE VULNERABILITY ITEMS STYLES */}
                <DragDropContext onDragEnd={onDragEnd}>
                  <Droppable droppableId="categories">
                    {(provided) => (
                      <ul
                        className="categories"
                        {...provided.droppableProps}
                        ref={provided.innerRef}
                      >
                        {categories.map(
                          (val: CategoriesCollectionType, index: number) => (
                            <Draggable
                              key={val.id}
                              draggableId={val.id.toString()}
                              index={index}
                            >
                              {(provided) => (
                                <>
                                  <li
                                    ref={provided.innerRef}
                                    {...provided.draggableProps}
                                    {...provided.dragHandleProps}
                                  >
                                    <div className="i flex items-center">
                                      <div
                                        className="h-3 w-3 rounded-full"
                                        style={{
                                          backgroundColor: val.color,
                                        }}
                                      ></div>
                                      <input
                                        className="focus:ring-3 ml-5 h-4 w-4 cursor-pointer rounded border-gray-300 bg-gray-50 focus:ring-blue-300"
                                        id={val.id.toString()}
                                        type="checkbox"
                                        checked={val.status}
                                        onChange={() => onChange(val, index)}
                                      />
                                      <label
                                        htmlFor={val.id.toString()}
                                        className={
                                          'flex h-6 cursor-pointer items-center overflow-hidden text-ellipsis whitespace-nowrap rounded py-4 pl-2 pr-6 text-xs text-gray-700 transition duration-300 ease-in-out hover:bg-blue-50 hover:text-blue-600'
                                        }
                                      >
                                        {val.title}
                                      </label>
                                    </div>
                                  </li>
                                </>
                              )}
                            </Draggable>
                          )
                        )}
                        {provided.placeholder}
                      </ul>
                    )}
                  </Droppable>
                </DragDropContext>
              </div>
            </li>
          </ul>
        )}
      </li>
    </ul>
  )
}

export default VulnerabilityOptions

{
  /* <li className="relative">
<a className="flex items-center text-sm py-6 px-2 h-6 overflow-hidden text-gray-700 text-ellipsis whitespace-nowrap rounded hover:text-blue-600 hover:bg-blue-50 transition duration-300 ease-in-out" href="#!" data-mdb-ripple="true" data-mdb-ripple-color="primary"

onClick={() => dispatch({ type: "TOGGLE_DHS_INDICATOR", payload: {} })}
>

<svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
<path strokeLinecap="round" strokeLinejoin="round" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
</svg>
{dhsIndicator == true ? <span>Hide DHS Indicators</span> : <span onClick={() => { onOpenDhsModal() }}>Show DHS Indicators</span>}
</a>
</li> */
}
{
  /* <li className="relative">
<a className="flex items-center text-sm py-4 px-2 h-12 overflow-hidden text-gray-700 text-ellipsis whitespace-nowrap rounded hover:text-blue-600 hover:bg-blue-50 transition duration-300 ease-in-out" href="#!" data-mdb-ripple="true" data-mdb-ripple-color="primary"


onClick={() => dispatch({ type: "TOGGLE_DSV_INDICATOR", payload: {} })}
>

<svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
<path strokeLinecap="round" strokeLinejoin="round" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
</svg>
<span>{dsvIndicator == true ? 'Hide DSV Indicators' : 'Show DSV Indicators'}</span>
</a>

{
dsvIndicator == true ?
<ul className="relative accordion-collapse collapse" id="collapseSidenavSecEx2" aria-labelledby="sidenavSecEx2" data-bs-parent="#sidenavSecExample">
<li className="relative">
<a className="flex items-center text-sm py-4 px-6 h-12 overflow-hidden text-gray-700 text-ellipsis whitespace-nowrap rounded hover:text-blue-600 hover:bg-blue-50 transition duration-300 ease-in-out" href="#!" data-mdb-ripple="true" data-mdb-ripple-color="primary"

onClick={() => { onOpenDsvModal() }}
>


<svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
<path strokeLinecap="round" strokeLinejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
</svg>
<span>Select Data Column</span>
</a>
</li>
</ul>
: null
}
</li> */
}
{
  /* removed DRAW AREA OF INTEREST BEFORE ITS IMPLEMENTED */
}

{
  /* <li className="relative">       
<a className="flex items-center text-sm py-4 px-5 h-12 overflow-hidden text-gray-700 text-ellipsis whitespace-nowrap rounded hover:text-blue-600 hover:bg-blue-50 transition duration-300 ease-in-out" href="#!" data-mdb-ripple="true" data-mdb-ripple-color="primary"
//onClick={() => setAreaofInterestStatus(!areaofInterestStatus)}
>
<svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
<path strokeLinecap="round" strokeLinejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
</svg>
<span>Draw Area of Interest</span>
</a>
</li> */
}

{
  /* removed Statistics BEFORE ITS IMPLEMENTED */
}
{
  /* <li className="relative">
<a className="flex items-center text-sm py-4 px-5 h-12 overflow-hidden text-gray-700 text-ellipsis whitespace-nowrap rounded hover:text-blue-600 hover:bg-blue-50 transition duration-300 ease-in-out" href="#!" data-mdb-ripple="true" data-mdb-ripple-color="primary"

//  onClick={() => setAreaofInterestStatus(!areaofInterestStatus)}

>

<svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
<path strokeLinecap="round" strokeLinejoin="round" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
</svg>
<span>Statistics</span>
</a>
</li> */
}
