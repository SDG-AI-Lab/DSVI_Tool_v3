import React, { useContext, useEffect } from 'react'
import { CircleMarker, Popup, Tooltip } from 'react-leaflet'
import { FilterContext } from '../../context/FilterContext'
import Papa from 'papaparse'
import L from 'leaflet'
import {
  CategoriesCollectionType,
  catColors,
} from '../../reducer/reducerInitialState'

export type CSVDataVulnerabilityType = {
  SV_scaled: string
  SV_scaled_cat: string
  SV_scaled_std: string
  SV_unscaled: string
  SV_unscaled_cat: string
  SV_unscaled_std: string
  lat: string
  lon: string
}

type CSVParseResultType = {
  data: CSVDataVulnerabilityType[]
  errors: any[]
  meta: {
    aborted: boolean
    cursor: number
    delimiter: string
    fields: any[]
    linebreak: string
    truncated: boolean
  }
}

const CircleMarkersVulnerability = () => {
  const { state, dispatch } = useContext(FilterContext)
  const vulnerability: boolean = state['vulnerability']
  const csv_data_vulnerability: CSVDataVulnerabilityType[] =
    state['csv_data_vulnerability']
  const categories: CategoriesCollectionType[] = state['categories']
  useEffect(() => {
    Papa.parse('static/SV_TJ_comp_1_4_Vulnerability_norm.csv', {
      header: true,
      delimiter: ',',
      download: true,
      complete: function (results: CSVParseResultType, file) {
        const data = results.data.filter((point) => point.lat && point.lon)
        dispatch({ type: 'FETCH_CSV_DATA_VULNERABILITY', payload: data })
      },
    })
  }, [vulnerability])

  const getColor = (scaled_cat) => {
    if (scaled_cat === 'Very Low') {
      return catColors.veryLow
    } else if (scaled_cat === 'Low') {
      return catColors.low
    } else if (scaled_cat === 'Middle') {
      return catColors.medium
    } else if (scaled_cat === 'High') {
      return catColors.high
    } else if (scaled_cat === 'Very High') {
      return catColors.veryHigh
    } else {
      return null
    }
  }

  return (
    <>
      {vulnerability &&
        csv_data_vulnerability &&
        csv_data_vulnerability
          .filter((vulnerability: CSVDataVulnerabilityType) => {
            let result = false
            categories.forEach((category) => {
              result =
                vulnerability.SV_scaled_cat === category.title &&
                category.status === true
                  ? true
                  : result
            })
            return result
          })
          .map((point, index) => {
            const { lat, lng } = L.latLng(Number(point.lat), Number(point.lon))

            const content = (
              <>
                Vulnerability:{' '}
                {point.SV_scaled_cat ? point.SV_scaled_cat : 'no data'} <br />
                Vulnerability Score:{' '}
                {point.SV_scaled
                  ? parseFloat(point.SV_scaled).toFixed(2)
                  : 'no data'}
              </>
            )
            return (
              <CircleMarker
                center={[lat, lng]}
                key={index}
                radius={2}
                pathOptions={{ color: getColor(point.SV_scaled_cat) }}
              >
                <Popup className="customPopup">{content}</Popup>
                <Tooltip>{content}</Tooltip>
              </CircleMarker>
            )
          })}
    </>
  )
}

export default CircleMarkersVulnerability
