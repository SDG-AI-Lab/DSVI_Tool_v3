import React, { useContext, useEffect } from 'react'
import { CircleMarker, Popup, Tooltip } from "react-leaflet"
import { FilterContext } from '../../context/FilterContext'
import Papa from "papaparse"
import L from 'leaflet'


const CircleMarkersVulnerability = () => {
  const {state, dispatch} = useContext(FilterContext);
  const vulnerability = state["vulnerability"];
  const csv_data_vulnerability = state['csv_data_vulnerability'];
  const categories = state['categories'];
  useEffect( () => {
    Papa.parse('static/SV_TJ_comp_1_4_Vulnerability_norm.csv', {
      header: true,
      delimiter: ",",
      download: true,
      complete: function(results, file) {
        const data = results.data.filter(point => point.lat && point.lon)
        dispatch({ type: "FETCH_CSV_DATA_VULNERABILITY", payload: data });
      }
    });
  }, [])

  const getColor = (scaled_cat) => {
    if (scaled_cat === 'Very Low') {
      return 'rgb(59 130 246)'
    } else if (scaled_cat === 'Low') {
      return 'rgb(34 197 94)'
    } else if (scaled_cat === 'Middle') {
      return 'rgb(234 179 8)'
    } else if (scaled_cat === 'High') {
      return 'rgb(249 115 22)'
    } else if (scaled_cat === 'Very High') {
      return 'rgb(239 68 68)'
    } else {
      return null;
    }
  }

  return <>
    {(vulnerability && csv_data_vulnerability) && csv_data_vulnerability
      .filter(vulnerability => {
        let result = false;
        categories.forEach(category => {
          result = (vulnerability.SV_scaled_cat === category.title && category.status === true ? true : result);
        });
        return result;
      })
      .map((point, index) => {
        const {lat, lng} = L.latLng(point.lat, point.lon)
        return (
          <CircleMarker center={[lat, lng]} key={index} radius={2} pathOptions={{ color: getColor(point.SV_scaled_cat) }}>
            <Popup>
             Vulnerability: {point.SV_scaled_cat} <br/> 
             Vulnerability Score: {parseFloat(point.SV_scaled).toFixed(2)}
            </Popup>
            <Tooltip>
             Vulnerability: {point.SV_scaled_cat} <br/> 
             Vulnerability Score: {parseFloat(point.SV_scaled).toFixed(2)}
            </Tooltip>
          </CircleMarker>
        )
      })
    }
  </>
}




export default CircleMarkersVulnerability